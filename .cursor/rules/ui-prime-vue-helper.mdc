---
description: 
globs: *.vue
alwaysApply: false
---
# PrimeVue Components

This project uses PrimeVue for user interface components. It's a comprehensive Vue 3 component library with built-in accessibility support, themes, and Tailwind CSS integration.

## Component Usage

Import components directly from the PrimeVue package:

```vue
<script setup>
import Button from "primevue/button";
import MultiSelect from "primevue/multiselect";
import Password from "primevue/password";
import Calendar from "primevue/calendar";
import InputText from "primevue/inputtext";
import Dropdown from "primevue/dropdown";
import DataTable from "primevue/datatable";
import Column from "primevue/column";
</script>
```

## Example Component Usage

### Basic Form Components

```vue
<template>
  <!-- Button with different variants -->
  <Button label="Primary Button" />
  <Button label="Secondary" severity="secondary" />
  <Button label="Success" severity="success" />
  <Button label="Danger" severity="danger" />
  <Button label="Outlined" outlined />
  
  <!-- Input Text -->
  <InputText v-model="value" placeholder="Enter text" />
  
  <!-- Password with toggle mask -->
  <Password v-model="password" :toggleMask="true" />
  
  <!-- Calendar/DatePicker -->
  <Calendar v-model="date" dateFormat="dd/mm/yy" />
</template>
```

### Selection Components

```vue
<template>
  <!-- Dropdown -->
  <Dropdown 
    v-model="selectedCity" 
    :options="cities" 
    optionLabel="name" 
    placeholder="Select a City"
    class="w-full md:w-56" 
  />
  
  <!-- MultiSelect -->
  <MultiSelect
    v-model="selectedCities"
    :options="cities"
    optionLabel="name"
    filter
    placeholder="Select Cities"
    :maxSelectedLabels="3"
    class="w-full md:w-80"
  />
</template>

<script setup>
const selectedCity = ref();
const selectedCities = ref();
const cities = ref([
  { name: "New York", code: "NY" },
  { name: "Rome", code: "RM" },
  { name: "London", code: "LDN" },
  { name: "Istanbul", code: "IST" },
  { name: "Paris", code: "PRS" },
]);
</script>
```

### Data Components

```vue
<template>
  <!-- DataTable -->
  <DataTable :value="products" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
  </DataTable>
</template>
```

### Navigation and Layout Components

```vue
<template>
  <!-- Card -->
  <Card style="width: 25rem">
    <template #title>Simple Card</template>
    <template #content>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
    </template>
  </Card>
  
  <!-- Panel -->
  <Panel header="Header">
    <p>Lorem ipsum dolor sit amet</p>
  </Panel>
  
  <!-- Accordion -->
  <Accordion :activeIndex="0">
    <AccordionTab header="Header I">
      <p>Lorem ipsum dolor sit amet</p>
    </AccordionTab>
    <AccordionTab header="Header II">
      <p>Sed ut perspiciatis unde omnis iste natus</p>
    </AccordionTab>
  </Accordion>
</template>
```

## Available Components

PrimeVue offers over 90 components divided into categories:

### Form Components
- **AutoComplete** - autocomplete field
- **Calendar** - date picker
- **Checkbox** - checkbox field
- **Chips** - tag input
- **ColorPicker** - color selector
- **Dropdown** - dropdown list
- **Editor** - rich text editor
- **InputGroup** - field grouping
- **InputMask** - masked field
- **InputNumber** - numeric field
- **InputOtp** - OTP field
- **InputSwitch** - switch
- **InputText** - text field
- **Knob** - knob control
- **Listbox** - selection list
- **MultiSelect** - multiple selection
- **Password** - password field
- **RadioButton** - radio button
- **Rating** - star rating
- **SelectButton** - selection buttons
- **Slider** - slider
- **Textarea** - multiline text field
- **ToggleButton** - toggle button
- **TreeSelect** - tree selection

### Data Components
- **DataTable** - data table
- **DataView** - data view
- **OrderList** - sortable list
- **OrganizationChart** - organization chart
- **Paginator** - pagination
- **PickList** - pick list
- **Tree** - tree
- **TreeTable** - tree table
- **Timeline** - timeline
- **VirtualScroller** - virtual scrolling

### Panel Components
- **Accordion** - accordion
- **Card** - card
- **DeferredContent** - deferred content
- **Divider** - divider
- **Fieldset** - fieldset
- **Panel** - panel
- **ScrollPanel** - scroll panel
- **Splitter** - splitter
- **Stepper** - stepper
- **TabView** - tabs
- **Toolbar** - toolbar

### Overlay Components
- **ConfirmDialog** - confirmation dialog
- **ConfirmPopup** - confirmation popup
- **Dialog** - dialog
- **DynamicDialog** - dynamic dialog
- **OverlayPanel** - overlay panel
- **Sidebar** - sidebar
- **Tooltip** - tooltip

### File Components
- **FileUpload** - file upload

### Menu Components
- **Breadcrumb** - breadcrumb navigation
- **ContextMenu** - context menu
- **Dock** - dock
- **Menu** - menu
- **Menubar** - menu bar
- **MegaMenu** - mega menu
- **PanelMenu** - panel menu
- **Steps** - steps
- **TabMenu** - tab menu
- **TieredMenu** - tiered menu

### Message Components
- **Message** - message
- **InlineMessage** - inline message
- **Toast** - toast notification

### Media Components
- **Carousel** - carousel
- **Galleria** - gallery
- **Image** - image

### Misc Components
- **Avatar** - avatar
- **AvatarGroup** - avatar group
- **Badge** - badge
- **BlockUI** - block UI
- **Chip** - chip
- **Inplace** - in-place editing
- **MeterGroup** - meter group
- **ProgressBar** - progress bar
- **ProgressSpinner** - progress spinner
- **ScrollTop** - scroll to top
- **Skeleton** - loading skeleton
- **Tag** - tag
- **Terminal** - terminal

## Component Styling

### Using Tailwind Classes

PrimeVue components can be styled using Tailwind CSS classes:

```vue
<template>
  <Button 
    label="Styled Button" 
    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
  />
  
  <InputText 
    v-model="value" 
    class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
  />
</template>
```

### PassThrough API

For advanced styling, use the PassThrough API:

```vue
<script setup>
const ptOptions = {
  root: { class: 'custom-button-root' },
  label: { class: 'custom-button-label' }
};
</script>

<template>
  <Button label="Custom Button" :pt="ptOptions" />
</template>
```

## Accessibility

PrimeVue components comply with WCAG 2.1 AA standards:

```vue
<template>
  <!-- Automatic ARIA labels -->
  <InputText 
    v-model="username" 
    aria-label="Username"
    placeholder="Enter username"
  />
  
  <!-- Keyboard navigation -->
  <DataTable :value="products" :tabindex="0">
    <Column field="name" header="Name"></Column>
  </DataTable>
</template>
```

## Form Validation

Integration with validation libraries:

```vue
<script setup>
import { useField, useForm } from 'vee-validate';
import * as yup from 'yup';

const schema = yup.object({
  email: yup.string().email().required(),
  password: yup.string().min(6).required(),
});

const { handleSubmit } = useForm({ validationSchema: schema });
const { value: email, errorMessage: emailError } = useField('email');
const { value: password, errorMessage: passwordError } = useField('password');
</script>

<template>
  <form @submit="handleSubmit">
    <InputText 
      v-model="email" 
      :class="{ 'p-invalid': emailError }"
      placeholder="Email"
    />
    <small class="p-error">{{ emailError }}</small>
    
    <Password 
      v-model="password" 
      :class="{ 'p-invalid': passwordError }"
      placeholder="Password"
    />
    <small class="p-error">{{ passwordError }}</small>
    
    <Button type="submit" label="Submit" />
  </form>
</template>
```

## Responsiveness

PrimeVue components are responsive by default, but can be further customized:

```vue
<template>
  <!-- Responsive columns in DataTable -->
  <DataTable :value="products" responsiveLayout="scroll">
    <Column field="code" header="Code" class="min-w-12rem"></Column>
    <Column field="name" header="Name" class="min-w-16rem"></Column>
  </DataTable>
  
  <!-- Responsive sizes -->
  <MultiSelect 
    v-model="selectedCities"
    :options="cities"
    class="w-full md:w-80"
  />
</template>
```
